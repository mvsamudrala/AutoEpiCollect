# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'variable_collect_multiplepgs.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QFileDialog
import subprocess
import pandas as pd
import os
import openpyxl
from io import StringIO
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
import time
from time import sleep
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as ec
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver import ChromeOptions
from sklearn import linear_model


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(-20, 0, 821, 571))
        self.stackedWidget.setObjectName("stackedWidget")
        self.options_page = QtWidgets.QWidget()
        self.options_page.setObjectName("options_page")
        self.mhc_combo = QtWidgets.QComboBox(self.options_page)
        self.mhc_combo.setGeometry(QtCore.QRect(490, 190, 181, 32))
        self.mhc_combo.setObjectName("mhc_combo")
        self.mhc_combo.addItem("")
        self.mhc_combo.addItem("")
        self.mhc_combo.addItem("")
        self.mhc_combo.addItem("")
        self.gene_label = QtWidgets.QLabel(self.options_page)
        self.gene_label.setGeometry(QtCore.QRect(160, 190, 161, 20))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(20)
        self.gene_label.setFont(font)
        self.gene_label.setObjectName("gene_label")
        self.gene_button = QtWidgets.QPushButton(self.options_page)
        self.gene_button.setGeometry(QtCore.QRect(500, 130, 161, 41))
        self.gene_button.setObjectName("gene_button")
        self.gene_box = QtWidgets.QLineEdit(self.options_page)
        self.gene_box.setGeometry(QtCore.QRect(110, 120, 271, 61))
        self.gene_box.setObjectName("gene_box")
        self.physicochemical_group = QtWidgets.QGroupBox(self.options_page)
        self.physicochemical_group.setGeometry(QtCore.QRect(590, 230, 161, 81))
        self.physicochemical_group.setObjectName("physicochemical_group")
        self.aliphatic_checkbox = QtWidgets.QCheckBox(self.physicochemical_group)
        self.aliphatic_checkbox.setGeometry(QtCore.QRect(0, 20, 121, 20))
        self.aliphatic_checkbox.setObjectName("aliphatic_checkbox")
        self.gravy_checkbox = QtWidgets.QCheckBox(self.physicochemical_group)
        self.gravy_checkbox.setGeometry(QtCore.QRect(0, 40, 121, 20))
        self.gravy_checkbox.setObjectName("gravy_checkbox")
        self.pi_checkbox = QtWidgets.QCheckBox(self.physicochemical_group)
        self.pi_checkbox.setGeometry(QtCore.QRect(0, 60, 121, 20))
        self.pi_checkbox.setObjectName("pi_checkbox")
        self.submit_button = QtWidgets.QPushButton(self.options_page)
        self.submit_button.setGeometry(QtCore.QRect(360, 470, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        self.submit_button.setFont(font)
        self.submit_button.setObjectName("submit_button")
        self.main_title = QtWidgets.QLabel(self.options_page)
        self.main_title.setGeometry(QtCore.QRect(250, 0, 331, 121))
        font = QtGui.QFont()
        font.setFamily("Microsoft Sans Serif")
        font.setPointSize(36)
        font.setBold(False)
        self.main_title.setFont(font)
        self.main_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.main_title.setIndent(-1)
        self.main_title.setObjectName("main_title")
        self.or_label = QtWidgets.QLabel(self.options_page)
        self.or_label.setGeometry(QtCore.QRect(430, 140, 31, 31))
        self.or_label.setObjectName("or_label")
        self.cancer_pm_box = QtWidgets.QTextEdit(self.options_page)
        self.cancer_pm_box.setGeometry(QtCore.QRect(110, 300, 271, 91))
        self.cancer_pm_box.setObjectName("cancer_pm_box")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.options_page)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(500, 380, 180, 41))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.toxicity_checkbox = QtWidgets.QCheckBox(self.horizontalLayoutWidget_2)
        self.toxicity_checkbox.setObjectName("toxicity_checkbox")
        self.horizontalLayout_2.addWidget(self.toxicity_checkbox)
        self.ifn_checkbox = QtWidgets.QCheckBox(self.horizontalLayoutWidget_2)
        self.ifn_checkbox.setObjectName("ifn_checkbox")
        self.horizontalLayout_2.addWidget(self.ifn_checkbox)
        self.verticalLayoutWidget_6 = QtWidgets.QWidget(self.options_page)
        self.verticalLayoutWidget_6.setGeometry(QtCore.QRect(150, 230, 184, 70))
        self.verticalLayoutWidget_6.setObjectName("verticalLayoutWidget_6")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_6)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.starting_combo = QtWidgets.QComboBox(self.verticalLayoutWidget_6)
        self.starting_combo.setObjectName("starting_combo")
        self.starting_combo.addItem("")
        self.starting_combo.addItem("")
        self.starting_combo.addItem("")
        self.verticalLayout_7.addWidget(self.starting_combo)
        self.existing_data_button = QtWidgets.QPushButton(self.verticalLayoutWidget_6)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(13)
        self.existing_data_button.setFont(font)
        self.existing_data_button.setObjectName("existing_data_button")
        self.verticalLayout_7.addWidget(self.existing_data_button)
        self.immuno_group = QtWidgets.QGroupBox(self.options_page)
        self.immuno_group.setGeometry(QtCore.QRect(440, 230, 141, 81))
        self.immuno_group.setObjectName("immuno_group")
        self.immunogenicity_checkbox = QtWidgets.QCheckBox(self.immuno_group)
        self.immunogenicity_checkbox.setGeometry(QtCore.QRect(10, 20, 121, 20))
        self.immunogenicity_checkbox.setObjectName("immunogenicity_checkbox")
        self.antigenicity_checkbox = QtWidgets.QCheckBox(self.immuno_group)
        self.antigenicity_checkbox.setGeometry(QtCore.QRect(10, 40, 121, 20))
        self.antigenicity_checkbox.setObjectName("antigenicity_checkbox")
        self.allergenicity_checkbox = QtWidgets.QCheckBox(self.immuno_group)
        self.allergenicity_checkbox.setGeometry(QtCore.QRect(10, 60, 121, 20))
        self.allergenicity_checkbox.setObjectName("allergenicity_checkbox")
        self.stability_group = QtWidgets.QGroupBox(self.options_page)
        self.stability_group.setGeometry(QtCore.QRect(530, 320, 120, 61))
        self.stability_group.setObjectName("stability_group")
        self.half_life_checkbox = QtWidgets.QCheckBox(self.stability_group)
        self.half_life_checkbox.setGeometry(QtCore.QRect(0, 20, 121, 20))
        self.half_life_checkbox.setObjectName("half_life_checkbox")
        self.instability_checkbox = QtWidgets.QCheckBox(self.stability_group)
        self.instability_checkbox.setGeometry(QtCore.QRect(0, 40, 121, 20))
        self.instability_checkbox.setObjectName("instability_checkbox")
        self.pop_cov_checkbox = QtWidgets.QCheckBox(self.options_page)
        self.pop_cov_checkbox.setGeometry(QtCore.QRect(490, 440, 211, 20))
        self.pop_cov_checkbox.setObjectName("pop_cov_checkbox")
        self.cancer_pm_label = QtWidgets.QLabel(self.options_page)
        self.cancer_pm_label.setGeometry(QtCore.QRect(70, 400, 341, 31))
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(20)
        self.cancer_pm_label.setFont(font)
        self.cancer_pm_label.setObjectName("cancer_pm_label")
        self.immune_char_checkbox = QtWidgets.QCheckBox(self.options_page)
        self.immune_char_checkbox.setGeometry(QtCore.QRect(430, 230, 21, 20))
        self.immune_char_checkbox.setObjectName("immune_char_checkbox")
        self.physicochem_checkbox = QtWidgets.QCheckBox(self.options_page)
        self.physicochem_checkbox.setGeometry(QtCore.QRect(580, 230, 21, 20))
        self.physicochem_checkbox.setObjectName("physicochem_checkbox")
        self.epistability_checkbox = QtWidgets.QCheckBox(self.options_page)
        self.epistability_checkbox.setGeometry(QtCore.QRect(520, 320, 21, 20))
        self.epistability_checkbox.setObjectName("epistability_checkbox")
        self.scoring_checkbox = QtWidgets.QCheckBox(self.options_page)
        self.scoring_checkbox.setGeometry(QtCore.QRect(490, 420, 211, 20))
        self.scoring_checkbox.setObjectName("scoring_checkbox")
        self.stackedWidget.addWidget(self.options_page)
        self.output_page = QtWidgets.QWidget()
        self.output_page.setObjectName("output_page")
        self.output_textbox = QtWidgets.QPlainTextEdit(self.output_page)
        self.output_textbox.setGeometry(QtCore.QRect(60, 33, 721, 391))
        self.output_textbox.setObjectName("output_textbox")
        self.back_button = QtWidgets.QPushButton(self.output_page)
        self.back_button.setGeometry(QtCore.QRect(330, 440, 171, 71))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        self.back_button.setFont(font)
        self.back_button.setObjectName("back_button")
        self.output_button = QtWidgets.QPushButton(self.output_page)
        self.output_button.setGeometry(QtCore.QRect(660, 360, 111, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.output_button.setFont(font)
        self.output_button.setObjectName("output_button")
        self.stackedWidget.addWidget(self.output_page)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.cancer_pm_box.setPlaceholderText(
            "Cancer: PM1,PM2,PM3,etc.\nExample input:\nGBM: R38H,G106V,E545K\nCRC: H1047R,Y1021K")

        ### Toggle between pages
        self.back_button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.options_page))

        self.submit_button.clicked.connect(self.take_text_input)
        self.gene_button.clicked.connect(lambda: self.open_filebox(1))
        self.existing_data_button.clicked.connect(lambda: self.open_filebox(2))

        ### Checkbox toggles
        self.immune_char_checkbox.stateChanged.connect(self.check_immune_characteristics)
        self.physicochem_checkbox.stateChanged.connect(self.check_physicochemical_properties)
        self.epistability_checkbox.stateChanged.connect(self.check_epitope_stability)

        self.immunogenicity_checkbox.stateChanged.connect(self.check_immunogenicity)
        self.antigenicity_checkbox.stateChanged.connect(self.check_antigenicity)
        self.allergenicity_checkbox.stateChanged.connect(self.check_allergenicity)

        self.aliphatic_checkbox.stateChanged.connect(self.check_aliphatic)
        self.gravy_checkbox.stateChanged.connect(self.check_gravy)
        self.pi_checkbox.stateChanged.connect(self.check_pi)

        self.half_life_checkbox.stateChanged.connect(self.check_half_life)
        self.instability_checkbox.stateChanged.connect(self.check_instability)

        ### Create push buttons to terminate AutoEpiCollect backend and open final excel spreadsheets

        self.gene_file = ""
        self.existing_data = ""
        self.data_filename = ""

    def check_immune_characteristics(self):
        if self.immune_char_checkbox.isChecked():
            self.immunogenicity_checkbox.setChecked(True)
            self.antigenicity_checkbox.setChecked(True)
            self.allergenicity_checkbox.setChecked(True)
        elif not self.immune_char_checkbox.isChecked():
            self.immunogenicity_checkbox.setChecked(False)
            self.antigenicity_checkbox.setChecked(False)
            self.allergenicity_checkbox.setChecked(False)

    def check_physicochemical_properties(self):
        if self.physicochem_checkbox.isChecked():
            self.aliphatic_checkbox.setChecked(True)
            self.gravy_checkbox.setChecked(True)
            self.pi_checkbox.setChecked(True)
        elif not self.physicochem_checkbox.isChecked():
            self.aliphatic_checkbox.setChecked(False)
            self.gravy_checkbox.setChecked(False)
            self.pi_checkbox.setChecked(False)

    def check_epitope_stability(self):
        if self.epistability_checkbox.isChecked():
            self.half_life_checkbox.setChecked(True)
            self.instability_checkbox.setChecked(True)
        elif not self.epistability_checkbox.isChecked():
            self.half_life_checkbox.setChecked(False)
            self.instability_checkbox.setChecked(False)

    def check_immunogenicity(self):
        antigenicity_check = self.antigenicity_checkbox.isChecked()
        allergenicity_check = self.allergenicity_checkbox.isChecked()
        if not self.immunogenicity_checkbox.isChecked():
            if self.immune_char_checkbox.isChecked():
                self.immune_char_checkbox.setChecked(False)
            self.antigenicity_checkbox.setChecked(antigenicity_check)
            self.allergenicity_checkbox.setChecked(allergenicity_check)
        elif self.immunogenicity_checkbox.isChecked():
            if antigenicity_check and allergenicity_check:
                self.immune_char_checkbox.setChecked(True)

    def check_antigenicity(self):
        immunogenicity_check = self.immunogenicity_checkbox.isChecked()
        allergenicity_check = self.allergenicity_checkbox.isChecked()
        if not self.antigenicity_checkbox.isChecked():
            if self.immune_char_checkbox.isChecked():
                self.immune_char_checkbox.setChecked(False)
            self.immunogenicity_checkbox.setChecked(immunogenicity_check)
            self.allergenicity_checkbox.setChecked(allergenicity_check)
        elif self.antigenicity_checkbox.isChecked():
            if immunogenicity_check and allergenicity_check:
                self.immune_char_checkbox.setChecked(True)

    def check_allergenicity(self):
        antigenicity_check = self.antigenicity_checkbox.isChecked()
        immunogenicity_check = self.immunogenicity_checkbox.isChecked()
        if not self.allergenicity_checkbox.isChecked():
            if self.immune_char_checkbox.isChecked():
                self.immune_char_checkbox.setChecked(False)
            self.antigenicity_checkbox.setChecked(antigenicity_check)
            self.immunogenicity_checkbox.setChecked(immunogenicity_check)
        elif self.allergenicity_checkbox.isChecked():
            if antigenicity_check and immunogenicity_check:
                self.immune_char_checkbox.setChecked(True)

    def check_aliphatic(self):
        gravy_check = self.gravy_checkbox.isChecked()
        pi_check = self.pi_checkbox.isChecked()
        if not self.aliphatic_checkbox.isChecked():
            if self.physicochem_checkbox.isChecked():
                self.physicochem_checkbox.setChecked(False)
            self.gravy_checkbox.setChecked(gravy_check)
            self.pi_checkbox.setChecked(pi_check)
        elif self.aliphatic_checkbox.isChecked():
            if gravy_check and pi_check:
                self.physicochem_checkbox.setChecked(True)

    def check_gravy(self):
        aliphatic_check = self.aliphatic_checkbox.isChecked()
        pi_check = self.pi_checkbox.isChecked()
        if not self.gravy_checkbox.isChecked():
            if self.physicochem_checkbox.isChecked():
                self.physicochem_checkbox.setChecked(False)
            self.aliphatic_checkbox.setChecked(aliphatic_check)
            self.pi_checkbox.setChecked(pi_check)
        elif self.gravy_checkbox.isChecked():
            if aliphatic_check and pi_check:
                self.physicochem_checkbox.setChecked(True)

    def check_pi(self):
        aliphatic_check = self.aliphatic_checkbox.isChecked()
        gravy_check = self.gravy_checkbox.isChecked()
        if not self.pi_checkbox.isChecked():
            if self.physicochem_checkbox.isChecked():
                self.physicochem_checkbox.setChecked(False)
            self.aliphatic_checkbox.setChecked(aliphatic_check)
            self.gravy_checkbox.setChecked(gravy_check)
        elif self.pi_checkbox.isChecked():
            if aliphatic_check and gravy_check:
                self.physicochem_checkbox.setChecked(True)

    def check_half_life(self):
        instability_check = self.instability_checkbox.isChecked()
        if not self.half_life_checkbox.isChecked():
            if self.epistability_checkbox.isChecked():
                self.epistability_checkbox.setChecked(False)
            self.instability_checkbox.setChecked(instability_check)
        elif self.half_life_checkbox.isChecked():
            if instability_check:
                self.epistability_checkbox.setChecked(True)

    def check_instability(self):
        half_life_check = self.half_life_checkbox.isChecked()
        if not self.instability_checkbox.isChecked():
            if self.epistability_checkbox.isChecked():
                self.epistability_checkbox.setChecked(False)
            self.half_life_checkbox.setChecked(half_life_check)
        elif self.instability_checkbox.isChecked():
            if half_life_check:
                self.epistability_checkbox.setChecked(True)

    def take_text_input(self):
        immunogenicity = self.immunogenicity_checkbox.isChecked()
        antigenicity = self.antigenicity_checkbox.isChecked()
        allergenicity = self.allergenicity_checkbox.isChecked()
        aliphatic = self.aliphatic_checkbox.isChecked()
        gravy = self.gravy_checkbox.isChecked()
        isoelectric = self.pi_checkbox.isChecked()
        half_life = self.half_life_checkbox.isChecked()
        instability = self.instability_checkbox.isChecked()
        toxicity = self.toxicity_checkbox.isChecked()
        ifn = self.ifn_checkbox.isChecked()
        scoring_function = self.scoring_checkbox.isChecked()
        population_coverage = self.pop_cov_checkbox.isChecked()
        path = "/Users/mvsamudrala/CancerVaccine/Peptides/epitopes/Automated_Collection/AutoEpiCollect.py"
        gene = self.gene_box.text()
        mutations = self.cancer_pm_box.toPlainText()
        # print(self.gene_file)
        if gene == "" and mutations == "" and self.gene_file == "" and self.mhc_combo.currentText() == "-- Choose MHC Class":
            self.show_popup(1)
        elif gene == "" and self.gene_file == "" and mutations == "":
            self.show_popup(7)
        elif mutations == "" and self.mhc_combo.currentText() == "-- Choose MHC Class":
            self.show_popup(8)
        elif gene == "" and self.gene_file == "" and self.mhc_combo.currentText() == "-- Choose MHC Class":
            self.show_popup(9)
        elif gene == "" and self.gene_file == "":
            self.show_popup(2)
        elif mutations == "":
            self.show_popup(3)
        elif self.mhc_combo.currentText() == "-- Choose MHC Class":
            self.show_popup(6)
        else:
            if self.mhc_combo.currentText() == "Class I":
                mhc = "I"
            elif self.mhc_combo.currentText() == "Class II":
                mhc = "II"
            else:
                mhc = "I,II"
            if self.starting_combo.currentText() == "Collect New Data":
                self.stackedWidget.setCurrentWidget(self.output_page)
                self.auto_epi_collect(immunogenicity, antigenicity, allergenicity, aliphatic, gravy, isoelectric,
                                      half_life, instability, toxicity, ifn, scoring_function, population_coverage, mhc)
                # subprocess.run(["python", path, gene, self.gene_file, mutations, self.existing_data, mhc,
                #                 immunogenicity, antigenicity, allergenicity, aliphatic, gravy, isoelectric,
                #                 half_life, instability, toxicity, ifn, population_coverage])
            elif self.starting_combo.currentText() == "Update Existing Data":
                if self.existing_data == "" or ".xlsx" not in self.data_filename:
                    self.show_popup(5)
                else:
                    self.stackedWidget.setCurrentWidget(self.output_page)
                    self.auto_epi_collect(immunogenicity, antigenicity, allergenicity, aliphatic, gravy, isoelectric,
                                          half_life, instability, toxicity, ifn, scoring_function, population_coverage,
                                          mhc)
                    # subprocess.run(["python", path, gene, self.gene_file, mutations, self.existing_data, mhc,
                    #                 immunogenicity, antigenicity, allergenicity, aliphatic, gravy, isoelectric,
                    #                 half_life, instability, toxicity, ifn, population_coverage])
            else:
                self.show_popup(4)

    def show_popup(self, option):
        msg = QMessageBox()
        msg.setWindowTitle("Alert!")
        if option == 1:
            msg.setText("Please enter a gene or gene file, mutation(s), and an MHC Class.")
            msg.setIcon(QMessageBox.Critical)
            msg.setStandardButtons(QMessageBox.Ok)
        if option == 2:
            msg.setText("Please enter a gene or gene file.")
            msg.setIcon(QMessageBox.Warning)
            msg.setStandardButtons(QMessageBox.Ok)
        if option == 3:
            msg.setText("Please enter mutation(s).")
            msg.setIcon(QMessageBox.Warning)
            msg.setStandardButtons(QMessageBox.Ok)
        if option == 4:
            msg.setText("Please select a collection option.")
            msg.setIcon(QMessageBox.Warning)
            msg.setStandardButtons(QMessageBox.Ok)
        if option == 5:
            msg.setText("Please input your existing data in .xlsx format.")
            msg.setIcon(QMessageBox.Warning)
            msg.setStandardButtons(QMessageBox.Ok)
        if option == 6:
            msg.setText("Please choose an MHC Class.")
            msg.setIcon(QMessageBox.Warning)
            msg.setStandardButtons(QMessageBox.Ok)
        if option == 7:
            msg.setText("Please enter a gene or gene file and mutation(s).")
            msg.setIcon(QMessageBox.Warning)
            msg.setStandardButtons(QMessageBox.Ok)
        if option == 8:
            msg.setText("Please enter mutation(s) and choose an MHC Class.")
            msg.setIcon(QMessageBox.Warning)
            msg.setStandardButtons(QMessageBox.Ok)
        if option == 9:
            msg.setText("Please enter a gene or gene file and choose an MHC Class")
            msg.setIcon(QMessageBox.Warning)
            msg.setStandardButtons(QMessageBox.Ok)

        x = msg.exec_()

    def open_filebox(self, option):
        if option == 1:
            self.gene_file = QFileDialog.getOpenFileName()[0]
            self.gene_filename = self.gene_file[self.gene_file.rfind("/") + 1:]
            if self.gene_filename == "":
                self.gene_button.setText("Input Gene File")
            else:
                self.gene_button.setText(self.gene_filename)
        elif option == 2:
            self.existing_data = QFileDialog.getOpenFileName()[0]
            self.data_filename = self.existing_data[self.existing_data.rfind("/") + 1:]
            if self.data_filename == "":
                self.existing_data_button.setText("Input Existing Data (.xlsx)")
            else:
                self.existing_data_button.setText(self.data_filename)

    def auto_epi_collect(self, i, an, al, ali, g, iso, h, ins, t, ifn, scoring, pop_cov, mhc_classes):
        start = time.time()
        parent_dir = os.getcwd()
        print(parent_dir)
        gene_target = "PIK3CA"
        gene_file = f"{gene_target}.fasta"
        print("Getting gene sequence in fasta format...")
        get_gene_sequence(gene_target)
        print("Obtained gene sequence")
        # cancer_mutations_dict = {"CRC": ["R38H", "R88Q", "G106V", "C420R", "E453Q", "E542K", "E545K", "R1023Q", "M1043I", "H1047R"],
        #                          "Meningioma": ["E110K", "I391M", "R108H", "G914R", "N345K", "E453K", "Y165H", "H1047R", "E545K"],
        #                          "BC": ["E542K", "E542V", "E545K", "Q546E", "Q546R", "H1047L", "H1047R", "N345K", "E726K", "C420R", "G118D", "E453K", "Q546K", "G1049R", "M1043I", "K111E", "E81K", "E545A", "E545G", "N1044K", "S405P"],
        #                          "Endometrial": ["E542K", "E542Q", "E545K", "E545G", "G1007R", "Y1021H", "Y1021C", "A1035V", "M1043I", "H1047Y", "H1047R", "G1050D", "T1052K", "H1065L"],
        #                          "Glioblastoma": ["R88E", "E542K", "E545A", "T1025N", "Y1021N", "R88Q", "P298T", "R310C", "T1031G", "V344G", "E453K", "E545K", "Y1021C", "M1043I", "N1044S", "H1047Y", "G1049S"]}
        # cancer_mutations_dict = {"CRC": ["R38H", "E452Q", "M1043I"], "Glioblastoma": ["M1043I"]}
        cancer_mutations_dict = {"CRC": ["R38H", "E542K"], "Glioblastoma": ["E542K"]}
        mutations_cancer_dict = {}
        df_dict = {}
        df_ranked_dict = {}
        filtered_dict = {}
        # optimized_dict = {}
        pop_cov_dict = {}
        optimized_pop_cov_dict = {}
        cancers = [cancer for cancer in cancer_mutations_dict.keys()]
        all_mutations = []
        for cancer in cancers:
            for mutation in cancer_mutations_dict[cancer]:
                if mutation not in all_mutations:
                    all_mutations.append(mutation)
                    mutations_cancer_dict[mutation] = [cancer]
                else:
                    mutations_cancer_dict[mutation].append(cancer)
                    # df_cancers = pd.DataFrame(my_cancers, columns=["Cancers"])
                    # mutations_cancer_dict[mutation] = df_cancers
        # mhc_classes = ["I", "II"]
        mhc_classes = ["I"]
        for mhc_class in mhc_classes:
            print("Making mutant fasta proteins...")
            make_mutant_genes(all_mutations, gene_file)
            print("Done making mutant fasta proteins")
            print("Obtaining all epitopes and binding affinities...")
            mutant_gene_all_epitopes_dict = get_epitopes_ba(all_mutations, mhc_class, mutations_cancer_dict)
            print("Done generating possible epitopes and binding affinities")
            print("Filtering out unmutated epitopes...")
            mutant_gene_mut_epitopes_dict = get_mutant_epitopes(all_mutations, mhc_class, mutant_gene_all_epitopes_dict,
                                                                mutations_cancer_dict)
            print("Done filtering out unmutated epitopes")
            get_peptides_path = f"{parent_dir}/Sequences/getpeptides_autoepicollect.py"
            print("Generating possible peptide sequences for all mutations...")
            get_peptides(all_mutations, mutant_gene_mut_epitopes_dict, mhc_class)
            print("Done generating all peptide sequences")
            if mhc_class == "I":
                final_out = f"all_variables_mhci.xlsx"
            else:
                final_out = f"all_variables_mhcii.xlsx"
            with pd.ExcelWriter(final_out, engine='openpyxl') as w:
                for pm in all_mutations:
                    print(f"Getting results for {pm}...")
                    immunogenicity_file = f"{parent_dir}/immunogenicity/predict_immunogenicity.py"
                    if mhc_class == "I":
                        # current_df = pd.read_excel(f"mutant_gene_mut_epitopes_mhci_{cancer}.xlsx", sheet_name=pm)
                        current_df = mutant_gene_mut_epitopes_dict[pm].copy()
                        peptide_fasta = f"{parent_dir}/Sequences/{pm}peptides_{mhc_class}.fasta"
                        with open(peptide_fasta, "r") as f:
                            pf = f.read()
                        peptide_file = f"{parent_dir}/Sequences/{pm}peptides_{mhc_class}.txt"
                        with open(peptide_file, "r") as fp:
                            p = fp.read()
                        with open(peptide_file, "r") as fp:
                            peptides = [line.strip() for line in fp]
                        hla_file = "MHCI_HLAs.txt"
                        with open(hla_file, "r") as fh:
                            hlas = fh.readlines()
                        print(f"Obtaining {pm} immunogenicity...")
                        get_local_immunogenicity_mhci()
                        print(f"Done obtaining {pm} immunogenicity scores")
                        print(f"Obtaining {pm} antigenicity...")
                        get_antigenicity(peptides)
                        print(f"Done obtaining {pm} antigenicity scores")
                        print(f"Obtaining {pm} allergenicity...")
                        get_allergenicity_algpred(peptides)
                        print(f"Done obtaining {pm} allergenicity predictions")
                        print(f"Obtaining {pm} toxicity...")
                        get_toxicity(peptides)
                        print(f"Done obtaining {pm} toxicity predictions")
                        print(
                            f"Obtaining {pm} half-life, instability, isoelectric point, aliphatic index, and GRAVY scores...")
                        get_protparam(peptides)
                        print(
                            f"Done obtaining {pm} half-life, instability, isoelectric point, aliphatic index, and GRAVY scores")
                        print(f"Obtaining {pm} IFN-gamma...")
                        get_ifn(peptides)
                        print(f"Done obtaining {pm} IFN-gamma predictions")
                        df_dict[pm] = current_df
                        current_df.to_excel(w, header=True, index=False, sheet_name=pm)
                        pd.DataFrame(mutations_cancer_dict[pm], columns=["Cancers"]).to_excel(w, header=True,
                                                                                              index=False,
                                                                                              sheet_name=pm,
                                                                                              startcol=current_df.shape[
                                                                                                           1] + 1,
                                                                                              startrow=0)
                        print(current_df)
                        print(f"Done obtaining all MHC I epitopes and clinical variables for {pm} mutation")
                    else:
                        # current_df = pd.read_excel(f"mutant_gene_mut_epitopes_mhcii_{cancer}.xlsx", sheet_name=pm)
                        current_df = mutant_gene_mut_epitopes_dict[pm].copy()
                        peptide_fasta = f"{parent_dir}/Sequences/{pm}peptides_{mhc_class}.fasta"
                        with open(peptide_fasta, "r") as f:
                            pf = f.read()
                        peptide_file = f"{parent_dir}/Sequences/{pm}peptides_{mhc_class}.txt"
                        with open(peptide_file, "r") as fp:
                            p = fp.read()
                        with open(peptide_file, "r") as fp:
                            peptides = [line.strip() for line in fp]
                        hla_file = "MHCII_HLAs.txt"
                        with open(hla_file, "r") as fh:
                            hlas = fh.readlines()
                        print(f"Obtaining {pm} immunogenicity...")
                        get_immunogenicity_mhcii(peptides)
                        print(f"Done obtaining {pm} immunogenicity scores")
                        print(f"Obtaining {pm} antigenicity...")
                        get_antigenicity(peptides)
                        print(f"Done obtaining {pm} antigenicity scores")
                        print(f"Obtaining {pm} allergenicity...")
                        get_allergenicity_netallergen(peptides)
                        # get_allergenicity_algpred(peptides)
                        print(f"Done obtaining {pm} allergenicity predictions")
                        print(f"Obtaining {pm} toxicity...")
                        get_toxicity(peptides)
                        print(f"Done obtaining {pm} toxicity predictions")
                        print(
                            f"Obtaining {pm} half-life, instability, isoelectric point, aliphatic index, and GRAVY scores...")
                        get_protparam(peptides)
                        print(
                            f"Done obtaining {pm} half-life, instability, isoelectric point, aliphatic index, and GRAVY scores")
                        print(f"Obtaining {pm} IFN-gamma...")
                        get_ifn(peptides)
                        print(f"Done obtaining {pm} IFN-gamma predictions")
                        df_dict[pm] = current_df
                        current_df.to_excel(w, header=True, index=False, sheet_name=pm)
                        pd.DataFrame(mutations_cancer_dict[pm], columns=["Cancers"]).to_excel(w, header=True,
                                                                                              index=False,
                                                                                              sheet_name=pm,
                                                                                              startcol=current_df.shape[
                                                                                                           1] + 1,
                                                                                              startrow=0)
                        print(current_df)
                        print(f"Done obtaining all MHC II epitopes and clinical variables for {pm} mutation")
            print("Done obtaining all epitopes and clinical variables for all mutations")

            if mhc_class == "I":
                ranked_final_out = "all_variables_ranked_mhci.xlsx"
            else:
                ranked_final_out = "all_variables_ranked_mhcii.xlsx"
            with pd.ExcelWriter(ranked_final_out, engine='openpyxl') as w:
                for pm in all_mutations:
                    print(f"Normalizing and ranking epitopes for {pm} mutation...")
                    current_df = df_dict[pm]
                    normalized_df = normalize_data(current_df, mhc_class)
                    ranked_df = apply_scoring_function(normalized_df, mhc_class)
                    df_ranked_dict[pm] = ranked_df
                    ranked_df.to_excel(w, header=True, index=False, sheet_name=pm)
                    pd.DataFrame(mutations_cancer_dict[pm], columns=["Cancers"]).to_excel(w, header=True, index=False,
                                                                                          sheet_name=pm,
                                                                                          startcol=current_df.shape[
                                                                                                       1] + 1,
                                                                                          startrow=0)
                    print(f"Done normalizing and ranking epitopes for {pm} mutation")
                print("Done normalizing and ranking epitopes for all mutations")

            if mhc_class == "I":
                top_epitopes_out = "top_epitopes_mhci.xlsx"
            else:
                top_epitopes_out = "top_epitopes_mhcii.xlsx"
            with pd.ExcelWriter(top_epitopes_out, engine='openpyxl') as w:
                for pm in all_mutations:
                    print(f"Filtering epitopes for {pm} mutation...")
                    ranked_df = df_ranked_dict[pm]
                    filtered_df = get_filtered_epitopes(ranked_df, mhc_class)
                    filtered_dict[pm] = filtered_df
                    filtered_df.to_excel(w, header=True, index=False, sheet_name=pm)
                    pd.DataFrame(mutations_cancer_dict[pm], columns=["Cancers"]).to_excel(w, header=True, index=False,
                                                                                          sheet_name=pm,
                                                                                          startcol=filtered_df.shape[
                                                                                                       1] + 1,
                                                                                          startrow=0)
                    print(f"Done filtering epitopes for {pm} mutation")
            if mhc_class == "I":
                top_filtered_epitopes_out = "top_epitopes_by_cancer_mhci.xlsx"
            else:
                top_filtered_epitopes_out = "top_epitopes_by_cancer_mhcii.xlsx"
            with pd.ExcelWriter(top_filtered_epitopes_out, engine='openpyxl') as w:
                for cancer in cancers:
                    sum_filtered_epitopes_df = pd.DataFrame()
                    for pm in cancer_mutations_dict[cancer]:
                        filtered_df = filtered_dict[pm]
                        sum_filtered_epitopes_df = pd.concat([sum_filtered_epitopes_df, filtered_df], ignore_index=True)
                    pop_cov_dict[cancer] = sum_filtered_epitopes_df
                    sum_filtered_epitopes_df.to_excel(w, header=True, index=False, sheet_name=cancer)
            print("Done filtering epitopes for all mutations")

            print(f"Obtaining MHC Class {mhc_class} population coverage results...")
            # if mhc_class == "I":
            #     op_top_epitopes_out = "optimized_top_epitopes_mhci.xlsx"
            # else:
            #     op_top_epitopes_out = "optimized_top_epitopes_mhcii.xlsx"
            # with pd.ExcelWriter(op_top_epitopes_out, engine='openpyxl') as w:
            #     for pm in all_mutations:
            #         print(f"Optimizing epitopes for {pm} mutation...")
            #         filtered_df = filtered_dict[pm]
            #         optimized_df = get_optimized_epitopes(filtered_df, mhc_class)
            #         optimized_dict[pm] = optimized_df
            #         optimized_df.to_excel(w, header=True, index=False, sheet_name=pm)
            #         pd.DataFrame(mutations_cancer_dict[pm], columns=["Cancers"]).to_excel(w, header=True, index=False,
            #                                                                               sheet_name=pm,
            #                                                                               startcol=optimized_df.shape[1] + 1,
            #                                                                               startrow=0)
            #         print(f"Done optimizing epitopes for {pm} mutation")
            if mhc_class == "I":
                top_op_epitopes_out = "optimized_epitopes_by_cancer_mhci.xlsx"
            else:
                top_op_epitopes_out = "optimized_epitopes_by_cancer_mhcii.xlsx"
            with pd.ExcelWriter(top_op_epitopes_out, engine='openpyxl') as w:
                for cancer in cancers:
                    print(f"Optimizing epitopes for {cancer}...")
                    sum_filtered_epitopes_df = pop_cov_dict[cancer]
                    if sum_filtered_epitopes_df.empty:
                        print(
                            f"No filtered MHC Class {mhc_class} epitopes for {cancer}, cannot perform population coverage analysis")
                    else:
                        optimized_df = get_optimized_epitopes(sum_filtered_epitopes_df, mhc_class)
                        optimized_pop_cov_dict[cancer] = optimized_df
                        optimized_df.to_excel(w, header=True, index=False, sheet_name=cancer)
                        print(f"Done optimizing epitopes for {cancer}")
            print("Done optimizing epitopes for all cancers")

            if mhc_class == "I":
                population_coverage_out = "population_results_by_cancer_mhci.xlsx"
            else:
                population_coverage_out = "population_results_by_cancer_mhcii.xlsx"
            with pd.ExcelWriter(population_coverage_out, engine='openpyxl') as w:
                for cancer in cancers:
                    sum_filtered_epitopes_df = pop_cov_dict[cancer]
                    if not sum_filtered_epitopes_df.empty:
                        print(f"Obtaining population coverage for {cancer}...")
                        optimized_df = optimized_pop_cov_dict[cancer]
                        regular_population_coverage, optimized_population_coverage = get_population_coverage(
                            sum_filtered_epitopes_df, optimized_df, mhc_class, cancer)
                        regular_population_coverage.to_excel(w, header=True, index=False, sheet_name=cancer)
                        optimized_population_coverage.to_excel(w, header=True, index=False, sheet_name=cancer,
                                                               startcol=regular_population_coverage.shape[1] + 1,
                                                               startrow=0)
                        print(f"Done obtaining population coverage for {cancer}")
            print(f"Done obtaining MHC Class {mhc_class} population coverage results for all cancers")
        end = time.time()
        print(f"AutoEpiCollect complete in {start - end} seconds, please click the button to the right to see your epitopes for each mutation")
        print("All other outputted Excel spreadsheets will be in the same directory as this program")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "AutoEpiCollect"))
        self.mhc_combo.setItemText(0, _translate("MainWindow", "-- Choose MHC Class"))
        self.mhc_combo.setItemText(1, _translate("MainWindow", "Class I"))
        self.mhc_combo.setItemText(2, _translate("MainWindow", "Class II"))
        self.mhc_combo.setItemText(3, _translate("MainWindow", "Class I & II"))
        self.gene_label.setText(_translate("MainWindow", "Input Gene Name"))
        self.gene_button.setText(_translate("MainWindow", "Input Gene File"))
        self.physicochemical_group.setTitle(_translate("MainWindow", "Physicochemical Properties"))
        self.aliphatic_checkbox.setText(_translate("MainWindow", "Aliphatic Index"))
        self.gravy_checkbox.setText(_translate("MainWindow", "GRAVY Score"))
        self.pi_checkbox.setText(_translate("MainWindow", "Isoelectric Point"))
        self.submit_button.setText(_translate("MainWindow", "Submit"))
        self.main_title.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:48pt;\">AutoEpiCollect</span></p></body></html>"))
        self.or_label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt; color:#00de68;\">OR</span></p></body></html>"))
        self.cancer_pm_box.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.toxicity_checkbox.setText(_translate("MainWindow", "Toxicity"))
        self.ifn_checkbox.setText(_translate("MainWindow", "IFN-γ Release"))
        self.starting_combo.setItemText(0, _translate("MainWindow", "-- Collection Option"))
        self.starting_combo.setItemText(1, _translate("MainWindow", "Collect New Data"))
        self.starting_combo.setItemText(2, _translate("MainWindow", "Update Existing Data"))
        self.existing_data_button.setText(_translate("MainWindow", "Input Existing Data (.xlsx)"))
        self.immuno_group.setTitle(_translate("MainWindow", "Immune Characteristics"))
        self.immunogenicity_checkbox.setText(_translate("MainWindow", "Immunogenicity"))
        self.antigenicity_checkbox.setText(_translate("MainWindow", "Antigenicity"))
        self.allergenicity_checkbox.setText(_translate("MainWindow", "Allergenicity"))
        self.stability_group.setTitle(_translate("MainWindow", "Epitope Stability"))
        self.half_life_checkbox.setText(_translate("MainWindow", "Half-Life"))
        self.instability_checkbox.setText(_translate("MainWindow", "Instability Index"))
        self.pop_cov_checkbox.setText(_translate("MainWindow", "Population Coverage Analysis"))
        self.cancer_pm_label.setText(_translate("MainWindow", "Input Cancer Types & Point Mutations"))
        self.immune_char_checkbox.setText(_translate("MainWindow", "CheckBox"))
        self.physicochem_checkbox.setText(_translate("MainWindow", "CheckBox"))
        self.epistability_checkbox.setText(_translate("MainWindow", "CheckBox"))
        self.scoring_checkbox.setText(_translate("MainWindow", "Four-Variable Scoring Function"))
        self.back_button.setText(_translate("MainWindow", "Back"))
        self.output_button.setText(_translate("MainWindow", "Click for Output"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
